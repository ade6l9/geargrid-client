{"ast":null,"code":"export const API_BASE = 'http://localhost:3001';\nexport function resolveImageUrl(path, type = 'build') {\n  const defaultBuildImage = \"/default-car.jpg\";\n  const defaultAvatarImage = \"/default-avatar.jpg\";\n  if (!path) {\n    return type === 'avatar' ? defaultAvatarImage : defaultBuildImage;\n  }\n  if (path.startsWith('http://') || path.startsWith('https://') || path.startsWith('data:image')) {\n    return path;\n  }\n  if (path.startsWith('/uploads/')) {\n    //case 1: path from db is correctly prefixed\n    return `${API_BASE}${path}`;\n  }\n  if (type === 'build' || type === 'avatar') {\n    if (path.startsWith('/')) {\n      //case 2: e.g., \"/filename.jpg\"\n      return `${API_BASE}/uploads${path}`; // path already includes the leading slash\n    } else {\n      //case 3: e.g., \"filename.jpg\"\n      return `${API_BASE}/uploads/${path}`;\n    }\n  }\n  if (path === defaultAvatarImage || path === defaultBuildImage) {\n    return path;\n  }\n  console.warn(`[resolveImageUrl] Unexpected path format: ${path}, type: ${type}. Falling back to default.`);\n  return type === 'avatar' ? defaultAvatarImage : defaultBuildImage;\n}","map":{"version":3,"names":["API_BASE","resolveImageUrl","path","type","defaultBuildImage","defaultAvatarImage","startsWith","console","warn"],"sources":["/Users/adelinadautovic/geargrid-client/src/utils/imageUrl.js"],"sourcesContent":["export const API_BASE = 'http://localhost:3001';\n\nexport function resolveImageUrl(path, type = 'build') {\n  const defaultBuildImage = \"/default-car.jpg\";\n  const defaultAvatarImage = \"/default-avatar.jpg\";\n\n  if (!path) {\n    return type === 'avatar' ? defaultAvatarImage : defaultBuildImage;\n  }\n\n  if (path.startsWith('http://') || path.startsWith('https://') || path.startsWith('data:image')) {\n    return path;\n  }\n\n  if (path.startsWith('/uploads/')) { //case 1: path from db is correctly prefixed\n    return `${API_BASE}${path}`;\n  }\n\n  if (type === 'build' || type === 'avatar') {\n    if (path.startsWith('/')) { //case 2: e.g., \"/filename.jpg\"\n      return `${API_BASE}/uploads${path}`; // path already includes the leading slash\n    } else { //case 3: e.g., \"filename.jpg\"\n      return `${API_BASE}/uploads/${path}`;\n    }\n  }\n\n  if (path === defaultAvatarImage || path === defaultBuildImage) {\n    return path;\n  }\n\n  console.warn(`[resolveImageUrl] Unexpected path format: ${path}, type: ${type}. Falling back to default.`);\n  return type === 'avatar' ? defaultAvatarImage : defaultBuildImage;\n\n}"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,uBAAuB;AAE/C,OAAO,SAASC,eAAeA,CAACC,IAAI,EAAEC,IAAI,GAAG,OAAO,EAAE;EACpD,MAAMC,iBAAiB,GAAG,kBAAkB;EAC5C,MAAMC,kBAAkB,GAAG,qBAAqB;EAEhD,IAAI,CAACH,IAAI,EAAE;IACT,OAAOC,IAAI,KAAK,QAAQ,GAAGE,kBAAkB,GAAGD,iBAAiB;EACnE;EAEA,IAAIF,IAAI,CAACI,UAAU,CAAC,SAAS,CAAC,IAAIJ,IAAI,CAACI,UAAU,CAAC,UAAU,CAAC,IAAIJ,IAAI,CAACI,UAAU,CAAC,YAAY,CAAC,EAAE;IAC9F,OAAOJ,IAAI;EACb;EAEA,IAAIA,IAAI,CAACI,UAAU,CAAC,WAAW,CAAC,EAAE;IAAE;IAClC,OAAO,GAAGN,QAAQ,GAAGE,IAAI,EAAE;EAC7B;EAEA,IAAIC,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,QAAQ,EAAE;IACzC,IAAID,IAAI,CAACI,UAAU,CAAC,GAAG,CAAC,EAAE;MAAE;MAC1B,OAAO,GAAGN,QAAQ,WAAWE,IAAI,EAAE,CAAC,CAAC;IACvC,CAAC,MAAM;MAAE;MACP,OAAO,GAAGF,QAAQ,YAAYE,IAAI,EAAE;IACtC;EACF;EAEA,IAAIA,IAAI,KAAKG,kBAAkB,IAAIH,IAAI,KAAKE,iBAAiB,EAAE;IAC7D,OAAOF,IAAI;EACb;EAEAK,OAAO,CAACC,IAAI,CAAC,6CAA6CN,IAAI,WAAWC,IAAI,4BAA4B,CAAC;EAC1G,OAAOA,IAAI,KAAK,QAAQ,GAAGE,kBAAkB,GAAGD,iBAAiB;AAEnE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}